services:
  # traefik:
  #   image: traefik:v2.11
  #   container_name: traefik
  #   restart: always
  #   command:
  #     - "--api.dashboard=true"
  #     - "--api.insecure=true"  # Remova em produção
  #     - "--providers.docker=true"
  #     - "--providers.docker.exposedbydefault=false"
  #     - "--entrypoints.web.address=:80"
  #     - "--entrypoints.websecure.address=:443"
  #     - "--certificatesresolvers.myresolver.acme.tlschallenge=true"
  #     - "--certificatesresolvers.myresolver.acme.email=${DEFAULT_EMAIL}"
  #     - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #     - "8080:8080" # Dashboard
  #   volumes:
  #     - traefik_letsencrypt:/letsencrypt
  #     - "/var/run/docker.sock:/var/run/docker.sock:ro"
  #   networks:
  #     - proxy_net


  n8n:
    image: n8nio/n8n:latest
    restart: always
    env_file:
      - .env
    environment:
      - N8N_HOST=n8n.squiddev.live
      - N8N_PROTOCOL=http
      - WEBHOOK_TUNNEL_URL=${WEBHOOK_TUNNEL_URL}
      - WEBHOOK_URL=${WEBHOOK_URL}
      - N8N_METRICS=true
      - N8N_METRICS_INCLUDE_WORKFLOWS=true
      - N8N_METRICS_EXPORTER=true
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=oseiasal
      - N8N_BASIC_AUTH_PASSWORD=${DEFAULT_PASSWORD}
    # labels:
    #   - "traefik.enable=true"
    #   - "traefik.http.routers.n8n.rule=Host(`n8n.squiddev.live`)"
    #   - "traefik.http.routers.n8n.entrypoints=websecure"
    #   - "traefik.http.routers.n8n.tls=true"
    #   - "traefik.http.services.n8n.loadbalancer.server.port=5678"
    #   - "traefik.http.routers.n8n.tls.certresolver=myresolver"

    ports:
      - "5678:5678"
    volumes:
      - n8n_data:/home/node/.n8n
    networks:
      - proxy_net
      - monitoring_net

  nginx_proxy:
    image: jc21/nginx-proxy-manager:latest
    restart: unless-stopped
    env_file:
      - .env
    environment:
      - INITIAL_ADMIN_EMAIL=${DEFAULT_EMAIL}
      - INITIAL_ADMIN_PASSWORD=${DEFAULT_PASSWORD}
    ports:
      - "80:80"
      - "81:81"
      - "443:443"
    volumes:
      - nginx_data:/data
      - letsencrypt_data:/etc/letsencrypt
    networks:
      - proxy_net

  postgres:
    image: pgvector/pgvector:pg17
    restart: always
    env_file:
      - .env    
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./schema.sql:/docker-entrypoint-initdb.d/schema.sql
    networks:
      - proxy_net

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    restart: always
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - monitoring_net

  grafana:
    image: grafana/grafana
    container_name: grafana
    restart: always
    ports:
      - "3000:3000"
    networks:
      - monitoring_net
    volumes:
      - grafana_data:/var/lib/grafana

volumes:
  traefik_letsencrypt:
  n8n_data:
  nginx_data:
  letsencrypt_data:
  postgres_data:
  grafana_data:

networks:
  proxy_net:
    driver: bridge
  monitoring_net:
    driver: bridge
