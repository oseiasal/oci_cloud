name: 'Terraform Provisioning and N8N Setup'

on:
  push:
    # paths:
    #   - environments/**
    branches: 
      - '*'
  pull_request:
    # paths:
    #   - environments/**
    branches: 
      - '*'
  workflow_dispatch:
    inputs:
      action:
        description: 'Selecione a ação'
        required: true
        type: choice
        options: 
          - destroy
          - provision-install
          - update

env:
  AWS_DEFAULT_REGION: "us-east-1"
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  INSTANCE_SSH_PUBLIC_KEY: ${{ secrets.INSTANCE_SSH_PUBLIC_KEY }}
  OCI_FINGERPRINT: ${{ secrets.OCI_FINGERPRINT }}
  OCI_API_API_KEY_PEM: ${{ secrets.OCI_API_API_KEY_PEM }}
  OCI_REGION: ${{ secrets.OCI_REGION }}
  OCI_TENANCY_OCID: ${{ secrets.OCI_TENANCY_OCID }}
  OCI_USER: ${{ secrets.OCI_USER }}
  DOT_ENV: ${{ secrets.DOT_ENV }}

jobs:

  plan:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        
      - name: Create SSH public key file
        run: |
          cat <<EOF > environments/n8n_machine/terraform/aws_terraform.pub
          ${{ secrets.INSTANCE_SSH_PUBLIC_KEY }}
          EOF
          chmod 600 environments/n8n_machine/terraform/aws_terraform.pub

      - name: Create OCI private key file
        run: |
          cat <<EOF > environments/n8n_machine/terraform/oci_api_key.pem
          ${{ secrets.OCI_API_API_KEY_PEM }}
          EOF
          chmod 600 environments/n8n_machine/terraform/oci_api_key.pem

      - name: Generate tfvars file
        run: |
          cat <<EOF > environments/n8n_machine/terraform/terraform.tfvars
          compartiment_id   = "$OCI_TENANCY_OCID"
          tenancy           = "$OCI_TENANCY_OCID"
          tenancy_ocid      = "$OCI_TENANCY_OCID"
          fingerprint       = "$OCI_FINGERPRINT"
          region            = "$OCI_REGION"
          user              = "$OCI_USER"
          ssh_key           = "/home/runner/work/oci_cloud/oci_cloud/environments/n8n_machine/terraform/aws_terraform"
          key_file          = "/home/runner/work/oci_cloud/oci_cloud/environments/n8n_machine/terraform/oci_api_key.pem"
          ssh_public_key    = "/home/runner/work/oci_cloud/oci_cloud/environments/n8n_machine/terraform/aws_terraform.pub"
          EOF

      - name: Terraform Init
        run: |
          cd environments/n8n_machine/terraform
          terraform init

      - name: Terraform Plan
        run: |
          cd environments/n8n_machine/terraform
          terraform plan

  destroy:
    if: github.event.inputs.action == 'destroy'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Create SSH public key file
        run: |
          cat <<EOF > environments/n8n_machine/terraform/aws_terraform.pub
          ${{ secrets.INSTANCE_SSH_PUBLIC_KEY }}
          EOF
          chmod 600 environments/n8n_machine/terraform/aws_terraform.pub

      - name: Create OCI private key file
        run: |
          cat <<EOF > environments/n8n_machine/terraform/oci_api_key.pem
          ${{ secrets.OCI_API_API_KEY_PEM }}
          EOF
          chmod 600 environments/n8n_machine/terraform/oci_api_key.pem

      - name: Generate tfvars file
        run: |
          cat <<EOF > environments/n8n_machine/terraform/terraform.tfvars
          compartiment_id   = "$OCI_TENANCY_OCID"
          tenancy           = "$OCI_TENANCY_OCID"
          tenancy_ocid      = "$OCI_TENANCY_OCID"
          fingerprint       = "$OCI_FINGERPRINT"
          region            = "$OCI_REGION"
          user              = "$OCI_USER"
          ssh_key           = "/home/runner/work/oci_cloud/oci_cloud/environments/n8n_machine/terraform/aws_terraform"
          key_file          = "/home/runner/work/oci_cloud/oci_cloud/environments/n8n_machine/terraform/oci_api_key.pem"
          ssh_public_key    = "/home/runner/work/oci_cloud/oci_cloud/environments/n8n_machine/terraform/aws_terraform.pub"
          EOF

      - name: Terraform Destroy
        run: |
          cd environments/n8n_machine/terraform
          terraform init
          terraform destroy -auto-approve

  apply:
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Create SSH public key file
        run: |
          cat <<EOF > aws_terraform.pub
          ${{ secrets.INSTANCE_SSH_PUBLIC_KEY }}
          EOF
          chmod 600 aws_terraform.pub

      - name: Create OCI private key file
        run: |
          cat <<EOF > oci_api_key.pem
          ${{ secrets.OCI_API_API_KEY_PEM }}
          EOF
          chmod 600 oci_api_key.pem

      - name: Generate tfvars file
        run: |
          cat <<EOF > environments/n8n_machine/terraform/terraform.tfvars
          compartiment_id   = "$OCI_TENANCY_OCID"
          tenancy           = "$OCI_TENANCY_OCID"
          tenancy_ocid      = "$OCI_TENANCY_OCID"
          fingerprint       = "$OCI_FINGERPRINT"
          region            = "$OCI_REGION"
          user              = "$OCI_USER"
          ssh_key           = "/home/runner/work/oci_cloud/oci_cloud/aws_terraform"
          key_file          = "/home/runner/work/oci_cloud/oci_cloud/oci_api_key.pem"
          ssh_public_key    = "/home/runner/work/oci_cloud/oci_cloud/aws_terraform.pub"
          EOF

      - name: Terraform Init
        run: |
          cd environments/n8n_machine/terraform
          terraform init

      - name: Terraform Apply
        run: |
          cd environments/n8n_machine/terraform
          terraform apply -auto-approve

  provision-install:
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Create SSH public key file
        run: |
          cat <<EOF > aws_terraform.pub
          ${{ secrets.INSTANCE_SSH_PUBLIC_KEY }}
          EOF
          chmod 600 aws_terraform.pub

      - name: Create OCI private key file
        run: |
          cat <<EOF > oci_api_key.pem
          ${{ secrets.OCI_API_API_KEY_PEM }}
          EOF
          chmod 600 oci_api_key.pem

      - name: Generate tfvars file
        run: |
          cat <<EOF > environments/n8n_machine/terraform/terraform.tfvars
          compartiment_id   = "$OCI_TENANCY_OCID"
          tenancy           = "$OCI_TENANCY_OCID"
          tenancy_ocid      = "$OCI_TENANCY_OCID"
          fingerprint       = "$OCI_FINGERPRINT"
          region            = "$OCI_REGION"
          user              = "$OCI_USER"
          ssh_key           = "/home/runner/work/oci_cloud/oci_cloud/aws_terraform"
          key_file          = "/home/runner/work/oci_cloud/oci_cloud/oci_api_key.pem"
          ssh_public_key    = "/home/runner/work/oci_cloud/oci_cloud/aws_terraform.pub"
          EOF

      - name: Terraform Init
        run: |
          cd environments/n8n_machine/terraform
          terraform init

      - name: Terraform Apply
        run: |
          cd environments/n8n_machine/terraform
          terraform apply -auto-approve

      - name: Obtain IP of the Terraform instance
        id: get_ip
        run: |
          cd environments/n8n_machine/terraform

          # Captura o IP uma única vez
          RAW_IP=$(terraform output -raw n8n_machine_ip)
          CLEANED_IP=$(echo "$RAW_IP" | grep -Eo '([0-9]{1,3}\.){3}[0-9]{1,3}' | head -n 1)

          if [[ -z "$CLEANED_IP" ]]; then
            echo "Error: Unable to extract a valid IP address."
            exit 1
          fi

          # Save the IP as output
          echo "n8n_machine_ip=$CLEANED_IP" >> $GITHUB_OUTPUT

      - name: Generate artifact
        uses: actions/upload-artifact@v4
        with:
          path: environments/n8n_machine/ansible/n8n_machine.ini 
          retention-days: 1
          name: n8n_machine.ini

    outputs:
      n8n_machine_ip: ${{ steps.get_ip.outputs.n8n_machine_ip }}

  ansible:
    if: github.event_name == 'workflow_dispatch'
    needs: provision-install
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Add SSH private key to agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.INSTANCE_SSH_PRIVATE_KEY }}

      - name: Test SSH connection
        run: |
          if [ -z "${{ needs. provision-install.outputs.n8n_machine_ip }}" ]; then
            echo "Error: n8n_machine_ip is not set."
            exit 1
          fi

          echo "Attempting SSH connection to ${{ env.n8n_machine_ip }}"
          ssh -o StrictHostKeyChecking=no -o BatchMode=yes ubuntu@${{ needs. provision-install.outputs.n8n_machine_ip }} "echo 'SSH OK: Login efetuado com sucesso'"
      
      - name: Create SSH private key file
        run: |
          cat <<EOF > environments/n8n_machine/ansible/aws_terraform
          ${{ secrets.INSTANCE_SSH_PRIVATE_KEY }}
          EOF
          chmod 600 environments/n8n_machine/ansible/aws_terraform

      - name: Create .env
        run: |
          cat <<EOF > environments/n8n_machine/ansible/files/.env
          ${{ secrets.DOT_ENV }}
          EOF
          chmod 600 environments/n8n_machine/ansible/.env
      
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: n8n_machine.ini  
          path: environments/n8n_machine/ansible/ 

      - name: Install Ansible
        run: |
          sudo apt update
          sudo apt install -y ansible
      
      - name: Run Ansible Playbook and update docker-compose
        if: github.event.inputs.action == 'update'
        run: |
          ansible-playbook environments/n8n_machine/ansible/n8n_machine.yml --start-at-task="Derrubar docker compose"

      - name: Run Ansible Playbook
        if: github.event.inputs.action != 'update'
        run: |
          ansible-playbook environments/n8n_machine/ansible/n8n_machine.yml -i ansible/n8n_machine.ini
