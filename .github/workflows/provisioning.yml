name: 'Terraform Provisioning and N8N Setup'

on:
  push:
    branches: [ "*" ]
  workflow_dispatch:

jobs:
  terraform:
    concurrency:
      group: terraform
      cancel-in-progress: true
    runs-on: ubuntu-latest

    env:
      AWS_DEFAULT_REGION: "us-east-1"
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      INSTANCE_SSH_PUBLIC_KEY: ${{ secrets.INSTANCE_SSH_PUBLIC_KEY }}
      OCI_FINGERPRINT: ${{ secrets.OCI_FINGERPRINT }}
      OCI_API_API_KEY_PEM: ${{ secrets.OCI_API_API_KEY_PEM }}
      OCI_REGION: ${{ secrets.OCI_REGION }}
      OCI_TENANCY_OCID: ${{ secrets.OCI_TENANCY_OCID }}
      OCI_USER: ${{ secrets.OCI_USER }}
      DOT_ENV: ${{ secrets.DOT_ENV }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Create OCI private key file
        run: |
          cat <<EOF > oci_api_key.pem
          ${{ secrets.OCI_API_API_KEY_PEM }}
          EOF
          chmod 600 oci_api_key.pem

      - name: Create SSH public key file
        run: |
          cat <<EOF > aws_terraform.pub
          ${{ secrets.INSTANCE_SSH_PUBLIC_KEY }}
          EOF
          chmod 600 aws_terraform.pub

      - name: Create SSH private key file
        run: |
          cat <<EOF > aws_terraform
          ${{ secrets.INSTANCE_SSH_PRIVATE_KEY }}
          EOF
          chmod 600 aws_terraform

      - name: Generate tfvars file
        run: |
          cat <<EOF > terraform/n8n_machine/terraform.tfvars
          compartiment_id   = "$OCI_TENANCY_OCID"
          tenancy           = "$OCI_TENANCY_OCID"
          tenancy_ocid      = "$OCI_TENANCY_OCID"
          fingerprint       = "$OCI_FINGERPRINT"
          region            = "$OCI_REGION"
          user              = "$OCI_USER"
          ssh_key           = "/home/runner/work/oci_cloud/oci_cloud/aws_terraform"
          key_file          = "/home/runner/work/oci_cloud/oci_cloud/oci_api_key.pem"
          ssh_public_key    = "/home/runner/work/oci_cloud/oci_cloud/aws_terraform.pub"
          EOF

      - name: Terraform Init
        run: |
          cd terraform/n8n_machine
          terraform init

      - name: Terraform Plan
        run: |
          cd terraform/n8n_machine
          terraform plan

      - name: Terraform Apply
        run: |
          cd terraform/n8n_machine
          terraform apply -auto-approve

      - name: Obtain IP of the Terraform instance
        id: get_ip
        run: |
          cd terraform/n8n_machine

          # Captura o IP uma Ãºnica vez
          RAW_IP=$(terraform output -raw n8n_machine_ip)
          CLEANED_IP=$(echo "$RAW_IP" | grep -Eo '([0-9]{1,3}\.){3}[0-9]{1,3}' | head -n 1)

          if [[ -z "$CLEANED_IP" ]]; then
            echo "Error: Unable to extract a valid IP address."
            exit 1
          fi

          # Save the IP as output
          echo "n8n_machine_ip=$CLEANED_IP" >> $GITHUB_ENV

  check-ssh:
    needs: terraform
    runs-on: ubuntu-latest
    steps:  
      - name: Add SSH private key to agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.INSTANCE_SSH_PRIVATE_KEY }}
      
      - name: Test SSH connection
        run: |
          ssh -o StrictHostKeyChecking=no -o BatchMode=yes ubuntu@${{ env.n8n_machine_ip }} "echo 'SSH OK: Login efetuado com sucesso'"

  ansible:
    needs: check-ssh
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      
      - name: Create .env
        run: |
          cat <<EOF > .env
          ${{ secrets.DOT_ENV }}
          EOF
          chmod 600 .env

      - name: Install Ansible
        run: |
          sudo apt update
          sudo apt install -y ansible

      - name: Run Ansible Playbook
        run: |
          ansible-playbook ansible/n8n_machine.yml -i ansible/n8n_machine.ini
